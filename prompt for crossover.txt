Write a heuristics function for neighborhood search for NCUC
{function_description.txt}


[Worse code]
def heuristics_v0(pg_relax: np.ndarray, onoff_relax: np.ndarray, pg: gurobipy.MVar, onoff: gurobipy.MVar, PG_MAX, PG_MIN, T_MIN_DOWN, T_MIN_UP, RU, RD, PL_MAX, a, b, c, PG_SUC, thermal_n, thermal_hour) -> gurobipy.TempConstr

    alpha = np.zeros(pg.shape)
    beta = np.zeros(onoff.shape)
    
    r = 2 * thermal_n * thermal_hour / 10  # Increase the constraint limit to give more flexibility
    
    for m in range(thermal_n):
        for n in range(thermal_hour):
            if onoff_relax[m][n] < 0.5:
                alpha[m][n] = 2 * (0.5 - onoff_relax[m][n])
                beta[m][n] = PG_SUC[m] + T_MIN_DOWN[m] * a[m]
            else:
                alpha[m][n] = 2 * (onoff_relax[m][n] - 0.5)
                beta[m][n] = PG_SUC[m] + T_MIN_UP[m] * a[m]
    
    # Initialize neighbor sum
    neighbor_sum = gurobipy.LinExpr()
    
    for m in range(thermal_n):
        for n in range(thermal_hour):
            # Penalty for changing the state of unit m from OFF to ON
            if onoff_relax[m][n] < 0.5:
                neighbor_sum += alpha[m][n] * onoff[m][n] + beta[m][n] * (onoff[m][n])
            # Penalty for changing the state of unit m from ON to OFF
            else:
                neighbor_sum += alpha[m][n] * (1 - onoff[m][n]) + beta[m][n] * (1 - onoff[m][n])
    
    return neighbor_sum <= r

[Better code]
def heuristics_v1(pg_relax: np.ndarray, onoff_relax: np.ndarray, pg: gurobipy.MVar, onoff: gurobipy.MVar, PG_MAX, PG_MIN, T_MIN_DOWN, T_MIN_UP, RU, RD, PL_MAX, a, b, c, PG_SUC, thermal_n, thermal_hour) -> gurobipy.TempConstr
    alpha = np.zeros(pg.shape)
    r = thermal_n * thermal_hour / 10
    less_than_half = onoff_relax < 0.5
    larger_than_half = onoff_relax >= 0.5
    alpha[less_than_half] = 2*(0.5 - onoff_relax[less_than_half])
    alpha[larger_than_half] = 2*(onoff_relax[larger_than_half] - 0.5)
    neighbor_sum = (alpha[less_than_half] * onoff[less_than_half]).sum() + (alpha[larger_than_half] * (1 - onoff[larger_than_half])).sum()
    return neighbor_sum <= r

[Reflection]
- Minimize redundant calculations by vectorizing operations.
- Adjust alpha dynamically based on historical solution quality.
- Introduce adaptive r scaling to balance flexibility and constraint adherence.

[Improved code]
Please write an improved function `heuristics_v2`, according to the reflection and the comparison of presented two codes.
Output code and process of thinking. Keep the function interface the same as the original one.
Enclose your code with Python code block: ```python ... ```.
Enclose your explanation about the codes with <desc>...</desc>.
Enclose physical characteristics used in codes with <phy>...</phy>.
Attempt to use the physical information of NCUC for designing heuristic functions.